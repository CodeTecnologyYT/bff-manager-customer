name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Secret Azure
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Configurar JDK en GitHub Actions
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'
          distribution: 'adopt'

      # Generar el archivo JAR con Gradle
      - name: Build JAR with Gradle
        run: |
          chmod +x gradlew
          ./gradlew build -x test

      # Verificar que el JAR se generó correctamente
      - name: List build/libs
        run: ls -lah build/libs

      # Iniciar sesión en Azure
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_NAME }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}≤

      # Construir y subir la imagen a ACR
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/bff-manager-customer:latest .
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/bff-manager-customer:latest

      # Eliminar contenedor existente en ACI (si ya existe)
      - name: Delete existing ACI container (if exists)
        continue-on-error: true
        run: |
          az container delete --name ${{ secrets.ACI_NAME }} \
            --resource-group ${{ secrets.ACI_RESOURCE_GROUP }} --yes

      # Crear un nuevo contenedor en ACI con la imagen
      - name: Deploy to Azure Container Instances
        run: |
          az container create \
            --resource-group ${{ secrets.ACI_RESOURCE_GROUP }} \
            --name ${{ secrets.ACI_NAME }} \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/bff-manager-customer:latest \
            --cpu 1 \
            --memory 1.5 \
            --registry-login-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-username $(az acr credential show --name ${{ secrets.ACR_NAME }} --query username --output tsv) \
            --registry-password $(az acr credential show --name ${{ secrets.ACR_NAME }} --query "passwords[0].value" --output tsv) \
            --environment-variables SEEK_DB_SQL_HOSTNAME=${{ secrets.SEEK_DB_SQL_HOSTNAME }} SEEK_DB_SQL_PORT=${{ secrets.SEEK_DB_SQL_PORT }} SEEK_DB_SQL_DATABASE=${{ secrets.SEEK_DB_SQL_DATABASE }} SEEK_DB_SQL_USERNAME=${{ secrets.SEEK_DB_SQL_USERNAME }} SEEK_DB_SQL_PASSWORD=${{ secrets.SEEK_DB_SQL_PASSWORD }} SEEK_REDIS_HOSTNAME=${{ secrets.SEEK_REDIS_HOSTNAME }} SEEK_REDIS_PORT=${{ secrets.SEEK_REDIS_PORT }} \
            --ports 8080

      # Obtener la URL pública del contenedor
      - name: Get container URL
        run: |
          az container show --resource-group ${{ secrets.ACI_RESOURCE_GROUP }} \
            --name ${{ secrets.ACI_NAME }} \
            --query ipAddress.fqdn --output table
